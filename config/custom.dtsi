/* 60 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────────┬────────────────────────────╮
  │  0   1   2   3   4   5     │      6   7   8   9  10  11 │
  │ 12  13  14  15  16  17     │     18  19  20  21  22  23 │
  │ 24  25  26  27  28  29     │     30  31  32  33  34  35 │
  │ 36  37  38  39  40  41  42 │ 43  44  45  46  47  48  49 │
  ╰───────╮ 50  51  52  53  54 │ 55  56  57  58  59 ╭───────╯
          ╰────────────────────┴────────────────────╯
 ╭─────────────────────────────┬─────────────────────────────╮
 │ LN5 LN4 LN3 LN2 LN1 LN0     │     RN0 RN1 RN2 RN3 RN4 RN5 │
 │ LT5 LT4 LT3 LT2 LT1 LT0     │     RT0 RT1 RT2 RT3 RT4 RT5 │
 │ LM5 LM4 LM3 LM2 LM1 LM0     │     RM0 RM1 RM2 RM3 RM4 RM5 │
 │ LB5 LB4 LB3 LB2 LB1 LB0 LEC │ REC RB0 RB1 RB2 RB3 RB4 RB5 │
 ╰───────╮ LH4 LH3 LH2 LH1 LH0 │ RH0 RH1 RH2 RH3 RH4 ╭───────╯
         ╰─────────────────────┴─────────────────────╯
  ╭────────────────────────────┬────────────────────────────╮
  │  `   1   2   3   4   5     │      6   7   8   9   0   = │
  │ ESC  Q   W   E   R   T     │      Y   U   I   O   P   - │
  │ TAB  A   S   D   F   G     │      H   J   K   L   ;   ' │
  │ SFT  Z   X   C   V   B ROT │ ROT  N   M   ,   .   /   \ │
  ╰───────╮ 50  51  52  53  54 │ 55  56  57  58  59 ╭───────╯
          ╰────────────────────┴────────────────────╯
*/

#include "zmk-helpers/key-labels/42.h"


#define KEYS_L LT0 LT1 LT2 LT3 LT4 \
               LM0 LM1 LM2 LM3 LM4 \
               LB0 LB1 LB2 LB3 LB4 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 \
               RM0 RM1 RM2 RM3 RM4 \
               RB0 RB1 RB2 RB3 RB4 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumbs

#define MOUSE_KEYS = RT0 RT1 RT2 RT3 \
                     RM0 RM1 RM2 RM3 \
                     RB1 RB2 RB3 RB4

// Shorten default mod tap tapping term
&mt {
  tapping-term-ms = <200>;
};

// Increase default layer tap tapping term
&lt {
  tapping-term-ms = <220>;
};


// Tap and tap dance combos -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define MAKE_TAP_DANCE(NAME, TAP, DANCE) \
  ZMK_TAP_DANCE(NAME, \
    tapping-term-ms = <200>; \
    bindings = <TAP>, <DANCE>; \
  )
#define MAKE_NAV_TAP_DANCE(NAME, TAP, DANCE) \
  ZMK_TAP_DANCE(NAME, \
    tapping-term-ms = <150>; \
    bindings = <TAP>, <DANCE>; \
  )

#define MAKE_TAP_DANCE_HOLD(NAME, TAP, DANCE, HOLD) \
  MAKE_TAP_DANCE(NAME, &kp TAP, &ht HOLD DANCE)

#define MAKE_HOLD_TAP_DANCE(NAME, HOLD, TAP, DANCE) \
  MAKE_TAP_DANCE(NAME, &ht HOLD TAP, &kp DANCE)

#define MAKE_HOLD_TAP_DANCE_HOLD(NAME, HOLD1, TAP, DANCE, HOLD2) \
  MAKE_TAP_DANCE(NAME, &ht HOLD1 TAP, &ht HOLD2 DANCE)

#define MAKE_NAV_HOLD_TAP(NAME, HOLD, TAP) \
  ZMK_HOLD_TAP(NAME, \
    flavor = "balanced"; \
    tapping-term-ms = <150>; \
    quick-tap-ms = <100>; \
    require-prior-idle-ms = <100>; \
    bindings = <HOLD>, <TAP>; \
  )

#define MAKE_HOLD_TAP(NAME, HOLD, TAP) \
  ZMK_HOLD_TAP(NAME, \
    flavor = "balanced"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <150>; \
    require-prior-idle-ms = <100>; \
    bindings = <HOLD>, <TAP>; \
  )

#define MAKE_LAYER_HOLD_TAP(NAME, HOLD, TAP) \
  ZMK_HOLD_TAP(NAME, \
    flavor = "balanced"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <150>; \
    require-prior-idle-ms = <100>; \
    bindings = <HOLD>, <TAP>; \
  )

#define MAKE_NAV_HOLD_TAP_DANCE_HOLD(NAME, HOLD1, TAP, DANCE, HOLD2) \
  MAKE_NAV_TAP_DANCE(NAME, &nht HOLD1 TAP, &nht HOLD2 DANCE)


MAKE_NAV_HOLD_TAP(nht, &kp, &kp)
MAKE_HOLD_TAP(ht, &kp, &kp)
MAKE_LAYER_HOLD_TAP(lht, &mo, &tog)

MAKE_TAP_DANCE_HOLD(bspc, BSPC, BSPC, LC(BSPC))
MAKE_TAP_DANCE_HOLD(del, DEL, DEL, LC(DEL))

MAKE_NAV_HOLD_TAP_DANCE_HOLD(down, DOWN, DOWN, DOWN, LC(END))
MAKE_NAV_HOLD_TAP_DANCE_HOLD(up, UP, UP, UP, LC(HOME))
MAKE_NAV_HOLD_TAP_DANCE_HOLD(left, LEFT, LEFT, LC(LEFT), HOME)
MAKE_NAV_HOLD_TAP_DANCE_HOLD(right, RIGHT, RIGHT, LC(RIGHT), END)

#define HOME_MT &mt LC(HOME) HOME
#define END_MT &mt LC(END) END
#define NAV_TOG &lht NAV NAV
#define MOUSE_TOG &lht MOUSE MOUSE
#define SYM_TOG &lht SYM SYM


// HOMEROW MODS --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define QUICK_TAP_MS 175

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
  ZMK_HOLD_TAP(NAME, \
    flavor = "balanced"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <QUICK_TAP_MS>; \
    require-prior-idle-ms = <200>; \
    bindings = <HOLD>, <TAP>; \
    hold-trigger-key-positions = <TRIGGER_POS>; \
    hold-trigger-on-release; \
  )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

#define HRMR(k0,k1,k2,k3) &hmr RALT k0 &hmr RCTRL k1 &hmr RSHFT k2 &hmr RGUI k3
#define HRML(k0,k1,k2,k3) &hml LGUI k0 &hml LSHFT k1 &hml LCTRL k2 &hml LALT k3

// MACROS --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define FORMAT &kp RS(RA(F))
#define CLOSE &kp RC(F4)
#define NEXT_WIN &kp RC(TAB)
#define PREV_WIN &kp LS(RC(TAB))
#define NEXT_APP &kp LG(TAB)

#define CUT &kp LC(X)
#define COPY &kp LC(INS)
#define PASTE &kp LS(INS)
#define SAVE &kp LC(S)

/ {

  macros {

    win_right: win_right {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp RG(RIGHT) &kp ESC>;
    };

    win_left: win_left {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp RG(LEFT) &kp ESC>;
    };

    win_up: win_up {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp RG(UP) &kp ESC>;
    };

    win_down: win_down {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp RG(DOWN) &kp ESC>;
    };
  };
};